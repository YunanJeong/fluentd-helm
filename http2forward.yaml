forwarder:
  enabled: false

## Aggregator parameters
##
aggregator:
  enabled: true
  replicaCount: 1


  ## @param aggregator.extraGems List of extra gems to be installed. Can be used to install additional fluentd plugins.
  ##
  extraGems: []
    # - name: fluent-plugin-beats 
    #   version: 2.1.2
  ## @param aggregator.configFile Name of the config file that will be used by Fluentd at launch under the `/opt/bitnami/fluentd/conf` directory
  ##
  configFile: fluentd.conf
  ## @param aggregator.configMap Name of the config map that contains the Fluentd configuration files
  ##
  configMap: ""
  ## @param aggregator.configMapFiles [object] Files to be added to be config map. Ignored if `aggregator.configMap` is set
  ##
  configMapFiles:
    # 디폴트 conf파일에 테스트 및 모니터링 등 기본기능을 위한 설정이 포함됨
    # 디폴트 conf내용 삭제시, value파일에서 관련기능 프로퍼티를 찾아 disabled해줘야 에러방지됨
    
    # :9880  # kubelet이 헬스체크(Probe)하려고 httpGet할 수 있도록 제공하는 포트
             # POST로 json받으면 stdout(pod로그)로 띄워주므로 테스트용도로 겸사겸사 사용가능
             # fluentd pod 관리에 사용되므로, 실제 메시지는 별도 http port를 활용하자
    # :24224 # fluentbit or fluentd로부터 데이터를 받기위한 포트. tag가 유지됨.
    # :24231 # 외부 Prometheus가 fluentd의 메트릭을 Pull Request할 수 있도록 제공하는 포트
    fluentd.conf: |
      # Ignore fluentd own events
      <match fluent.**>
        @type null
      </match>

      @include http-to-forward.conf

      @include fluentd-inputs.conf
      @include fluentd-output.conf
      {{- if .Values.metrics.enabled }}
      @include metrics.conf
      {{- end }}

    http-to-forward.conf: |
      <source>
        @type http   
        bind 0.0.0.0
        port 9999
        <parse>
          # 데이터 라인 전체를 파싱없이 단일 key에 담는다.
          @type none       
          message_key data # default: message
        </parse>
      </source>

      <match forwarding-test>
        @type forward
        
        # forward로 다른 fluentd에 전송시, tag가 유지됨
        # forward엔 formatter 사용 불가
        # key-value 형태로 전달해야 함.  rawstring을 처리하더라도 단일 필드에 담아서 전달해야 함

        # out_forward에서 디테일한 TLS 설정은 aggregator말고 forwarder 쪽 설정을 참고
        # transport tls                    # tls 활성화
        # tls_insecure_mode true           # 인증서 검증 건너뛰기(테스트용, TLS의 암호화기능은 활성화되지만, 논리적 중간자 공격을 피할 수없음. TLS 최소요건 불만족. TLS 아예 안쓰는거보단 보안에 좋음)
        # tls_allow_self_signed_cert true  # 서버(in_forward) 측에서 자체서명 인증서 사용시 허용할지 여부. 자체서명 서버 인증서와 동일한 파일이 클라이언트(out_forward)에도 있어야 함 
        # tls_cert_path /path/               # 클라이언트 측에 수동 복사해둔 서버의 자체서명 인증서 경로 # 클라이언트 증명용 인증서가 아니다
                                             # 쿠버네티스 환경에선 Secret, Volume 등 설정이 필요하기 때문에, 다소 번거로움. 실제 구현은 forwarder 쪽 설정을 참고.
                                             # fluentd 헬름차트에서 지원하는 TLS 자동 구성은 클러스터 내부의 forwarder, aggregator 통신에 초점이 맞춰짐
                                             
        # tls_verify_hostname false                 

        # 여러 서버로 분할 라우팅 가능하며 weight으로 비율조절 가능
        <server>
          name wsl
          host wsl
          port 24224
          weight 60
        </server>

        # <server>
        #   name wsl2
        #   host wsl2
        #   port 24225
        #   weight 40
        # </server>

      </match>


    fluentd-inputs.conf: |
      # TCP input to receive logs from
      {{- if .Values.aggregator.port }}
      <source>
        @type forward
        bind 0.0.0.0
        port {{ .Values.aggregator.port }}
        {{- if .Values.tls.enabled }}
        <transport tls>
          ca_path /opt/bitnami/fluentd/certs/in_forward/ca.crt
          cert_path /opt/bitnami/fluentd/certs/in_forward/tls.crt
          private_key_path /opt/bitnami/fluentd/certs/in_forward/tls.key
          client_cert_auth true
        </transport>
        {{- end }}
      </source>
      {{- end }}

      # HTTP input for the liveness and readiness probes
      <source>
        @type http
        bind 0.0.0.0
        port 9881
      </source>

    fluentd-output.conf: |
      # Throw the healthcheck to the standard output
      <match fluentd.healthcheck>
        @type stdout
      </match>

      # Send the logs to the standard output
      <match **>
        @type stdout
      </match>
    metrics.conf: |
      # Prometheus Exporter Plugin
      # input plugin that exports metrics
      <source>
        @type prometheus
        port {{ .Values.metrics.service.port }}
      </source>

      # input plugin that collects metrics from MonitorAgent
      <source>
        @type prometheus_monitor
        <labels>
          host ${hostname}
        </labels>
      </source>

      # input plugin that collects metrics for output plugin
      <source>
        @type prometheus_output_monitor
        <labels>
          host ${hostname}
        </labels>
      </source>
  
  ## @param aggregator.port Port the Aggregator container will listen for logs. Leave it blank to ignore.
  ## You can specify other ports in the aggregator.containerPorts parameter
  ##
  port: 24223
  ## @param aggregator.extraArgs Extra arguments for the Fluentd command line
  ## ref: https://docs.fluentd.org/deployment/command-line-option
  ##
  extraArgs: ""
  ## @param aggregator.extraEnvVars Extra environment variables to pass to the container
  ## extraEnvVars:
  ##   - name: MY_ENV_VAR
  ##     value: my_value
  ##
  extraEnvVars: []
  ## @param aggregator.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for Fluentd Aggregator nodes
  ##
  extraEnvVarsCM: ""
  ## @param aggregator.extraEnvVarsSecret Name of existing Secret containing extra env vars for Fluentd Aggregator nodes
  ##
  extraEnvVarsSecret: ""
  ## @param aggregator.containerPorts [array] Ports the aggregator containers will listen on
  ##
  containerPorts:
    # - name: my-port
    #   containerPort: 24222
    #   protocol: TCP
    - name: http
      containerPort: 9881
      protocol: TCP
    - name: test
      containerPort: 9999
      protocol: TCP
  ## Service parameters
  ##
  service:
    ## @param aggregator.service.type Kubernetes service type (`ClusterIP`, `NodePort`, or `LoadBalancer`) for the aggregators
    ##
    type: LoadBalancer
    ## @param aggregator.service.ports [object] Array containing the aggregator service ports
    ##
    ports:
      http:
        port: 9881
        targetPort: http
        protocol: TCP
      tcp:
        port: 24223
        targetPort: tcp
        protocol: TCP
      test:
        port: 9999
        targetPort: test
        protocol: TCP

    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    clusterIP: ""
    annotations: {}
    externalTrafficPolicy: Cluster
    sessionAffinity: None
    sessionAffinityConfig: {}
    annotationsHeadless: {}


  ingress:
    enabled: false
  
  startupProbe:
    enabled: false

  livenessProbe:
    enabled: true
    httpGet:
      path: /fluentd.healthcheck?json=%7B%22ping%22%3A+%22pong%22%7D
      port: http
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  readinessProbe:
    enabled: false

  updateStrategy:
    type: RollingUpdate

  resources: {}

  nodeSelector: {}
  
  autoscaling:
    enabled: false

  ## Persist data to a persistent volume
  ##
  persistence:
    enabled: false
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 10Gi
    ## @param aggregator.persistence.selector Selector to match an existing Persistent Volume (this value is evaluated as a template)
    ## selector:
    ##   matchLabels:
    ##     app: my-app
    selector: {}
    ## @param aggregator.persistence.annotations Persistent Volume Claim annotations
    ##
    annotations: {}


  sidecars: []

  initContainers: # []
    - name: install-offline-plugins
      image: '{{ include "fluentd.aggregator.image" . }}'  # 동일 이미지 tpl
      imagePullPolicy: IfNotPresent
      # 명령어 Permission Denied 방지
      securityContext:
        allowPrivilegeEscalation: false
        runAsUser: 0
      command: [sh, -c]
      args:
        - |-
          # install gems in Init Container
          fluent-gem install /plugins/*.gem

          # copy installed gems to shared dir
          cp -r /opt/bitnami/fluentd/extensions/* /extensions/
          cp -r /opt/bitnami/fluentd/gems/* /gems/
          cp -r /opt/bitnami/fluentd/specifications/* /specifications

      # init Container에 Volume 추가(마운트)
      volumeMounts:
        # 로컬 설치파일을 init container에 등록
        - name: local-gems
          mountPath: /plugins         # init container 내부 경로
        # App Container, Init Container 간 공유 볼륨
        - name: shared-dir  
          mountPath: /extentions      # init container 내부 경로
          subPath: extentions         # 볼륨 내 서브경로 매칭
        - name: shared-dir     
          mountPath: /gems            # init container 내부 경로
          subPath: gems               # 볼륨 내 서브경로 매칭
        - name: shared-dir
          mountPath: /specifications  # init container 내부 경로
          subPath: specifications     # 볼륨 내 서브경로 매칭

  # 새 볼륨을 정의할 때 사용
  extraVolumes: # []
    # 로컬호스트(Node)와 Init Container 간 공유 볼륨
    - name: local-gems
      hostPath:     
        type: Directory
        path: /etc/plugins  # 로컬호스트 경로
    # App Container, Init Container 간 공유 볼륨
    - name: shared-dir
      emptyDir: {}  
      
  # 정의된 볼륨을 컨테이너 내부 경로에 마운트할 때 사용
  extraVolumeMounts: # []
    - name: shared-dir
      mountPath: /opt/bitnami/fluentd/extensions/      # App. Container 내부 경로
      subPath: extensions
    - name: shared-dir
      mountPath: /opt/bitnami/fluentd/gems/            # App. Container 내부 경로
      subPath: gems
    - name: shared-dir
      mountPath: /opt/bitnami/fluentd/specifications/  # App. Container 내부 경로
      subPath: specifications

   
  extraVolumeClaimTemplates: []
  initScripts: {}
  initScriptsCM: ""
  initScriptsSecret: ""

## Prometheus Exporter / Metrics
##
metrics:
  enabled: false

tls:
  enabled: false
  autoGenerated: false
